package search

import (
	alg "alg/container"
	"testing"
)

// https://leetcode.com/problems/generate-parentheses/
func generateParenthesis(n int) []string {
	cmbMem := map[int][]string{
		1: {"()"},
		2: {"(())", "()()"},
		3: {"((()))", "(()())", "(())()", "()(())", "()()()"},
		4: {"(((())))", "((()()))", "((())())", "((()))()", "(()(()))", "(()()())", "(()())()", "(())(())", "(())()()", "()((()))", "()(()())", "()(())()", "()()(())", "()()()()"},
		5: {},
	}

	if cmb, exists := cmbMem[n]; exists {
		return cmb
	}

	gp := &genParenthesis{}
	gp.run(n, 0, "")
	return gp.result
}

type genParenthesis struct {
	result []string
}

func (gp *genParenthesis) run(open, closed int, cmb string) {
	if open == 0 && closed == 0 {
		gp.result = append(gp.result, cmb)
		return
	}

	if open > 0 {
		gp.run(open-1, closed+1, cmb+"(")
	}

	if closed > 0 {
		gp.run(open, closed-1, cmb+")")
	}
}

func TestGenerateParenthesis(t *testing.T) {
	testCases := map[int][]string{
		1: {"()"},
		2: {"()()", "(())"},
		3: {"((()))", "(()())", "(())()", "()(())", "()()()"},
		4: {"(((())))", "((()()))", "((())())", "((()))()", "(()(()))", "(()()())", "(()())()", "(())(())", "(())()()", "()((()))", "()(()())", "()(())()", "()()(())", "()()()()"},
		5: {"((((()))))", "(((()())))", "(((())()))", "(((()))())", "(((())))()", "((()(())))", "((()()()))", "((()())())", "((()()))()", "((())(()))",
			"((())()())", "((())())()", "((()))(())", "((()))()()", "(()((())))", "(()(()()))", "(()(())())", "(()(()))()", "(()()(()))", "(()()()())",
			"(()()())()", "(()())(())", "(()())()()", "(())((()))", "(())(()())", "(())(())()", "(())()(())", "(())()()()", "()(((())))", "()((()()))",
			"()((())())", "()((()))()", "()(()(()))", "()(()()())", "()(()())()", "()(())(())", "()(())()()", "()()((()))", "()()(()())", "()()(())()", "()()()(())", "()()()()()"},
	}
	for tc, exp := range testCases {
		got := generateParenthesis(tc)
		if !alg.CmpUnorderedStringArray(exp, got) {
			t.Errorf("tc %d, exp %s, got %s", tc, exp, got)
		}
	}
}
